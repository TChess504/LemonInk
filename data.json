"Creating a 3D game can be challenging. That extra Z coordinate makes many of the common techniques that helped to make 2D games simpler no longer work. To aid in this transition, it is worth mentioning that Godot uses similar APIs for 2D and 3D. Most nodes are the same and are present in both 2D and 3D versions. In fact, it is worth checking the 3D platformer tutorial, or the 3D kinematic character tutorials, which are almost identical to their 2D counterparts.\n\nIn 3D, math is a little more complex than in 2D, so also checking the Vector math entry in the wiki (which was especially created for game developers, not mathematicians or engineers) will help pave the way for you to develop 3D games efficiently.\n\nNode3Ds have a local transform, which is relative to the parent node (as long as the parent node is also of or inherits from the type Node3D). This transform can be accessed as a 4×3 Transform3D , or as 3 Vector3 members representing location, Euler rotation (X, Y and Z angles) and scale.\n\nBe aware that \"Spatial\" Nodes are now called \"Node3D\" starting with Godot 4. Any Godot 3.x references to \"Spatial\" Nodes refer to \"Node3D\" in Godot 4.\n\nNode2D is the base node for 2D. Control is the base node for everything GUI. Following this reasoning, the 3D engine uses the Node3D node for everything 3D.\n\nThe disadvantage is, of course, that added complexity and reduced performance in comparison to plain 2D, as well as the lack of reference of working in pixels.\n\nWhile Godot packs a powerful 2D engine, many types of games use 2D in a 3D environment. By using a fixed camera (either orthogonal or perspective) that does not rotate, nodes such as Sprite3D and AnimatedSprite3D can be used to create 2D games that take advantage of mixing with 3D backgrounds, more realistic parallax, lighting/shadow effects, etc.\n\nIf, instead, you need to generate simple geometry that will be updated often, Godot provides a special ImmediateMesh resource that can be used in a MeshInstance3D node. This provides an OpenGL 1.x-style immediate-mode API to create points, lines, triangles, etc.\n\nIn any case, this method is meant for generating static geometry (models that will not be updated often), as creating vertex arrays and submitting them to the 3D API has a significant performance cost.\n\nIt is possible to create custom geometry by using the ArrayMesh resource directly. Simply create your arrays and use the ArrayMesh.add_surface_from_arrays() function. A helper class is also available, SurfaceTool , which provides a more straightforward API and helpers for indexing, generating normals, tangents, etc.\n\nThe second pipeline is by importing simple .OBJ files as mesh resources, which can be then put inside a MeshInstance3D node for display.\n\nThere are two pipelines to import 3D models in Godot. The first and most common one is by Importing 3D scenes , which allows you to import entire scenes (exactly as they look in the 3D modeling software), including animation, skeletal rigs, blend shapes, etc.\n\nUnlike 2D, where loading image content and drawing is straightforward, 3D is a little more difficult. The content needs to be created with special 3D tools (also called Digital Content Creation tools, or DCCs) and exported to an exchange file format to be imported in Godot. This is required since 3D formats are not as standardized as images.\n\nBesides editing a scene, it is often common to edit the environment. Godot provides a WorldEnvironment node that allows changing the background color, mode (as in, put a skybox), and applying several types of built-in post-processing effects. Environments can also be overridden in the Camera.\n\n3D viewport¶\n\nEditing 3D scenes is done in the 3D tab. This tab can be selected manually, but it will be automatically enabled when a Node3D node is selected.\n\nDefault 3D scene navigation controls are similar to Blender (aiming to have some sort of consistency in the free software pipeline..), but options are included to customize mouse buttons and behavior to be similar to other tools in the Editor Settings:\n\nCoordinate system¶ Godot uses the metric system for everything in 3D, with 1 unit being equal to 1 meter. Physics and other areas are tuned for this scale. Therefore, attempting to use a different scale is usually a bad idea (unless you know what you are doing). When working with 3D assets, it's always best to work in the correct scale (set the unit to metric in your 3D modeling software). Godot allows scaling post-import and, while this works in most cases, in rare situations it may introduce floating-point precision issues (and thus, glitches or artifacts) in delicate areas such as rendering or physics. Make sure your artists always work in the right scale! The Y coordinate is used for \"up\". As for the horizontal X/Z axes, Godot uses a right-handed coordinate system. This means that for most objects that need alignment (such as lights or cameras), the Z axis is used as a \"pointing towards\" direction. This convention roughly means that: X is sides\n\nY is up/down\n\nZ is front/back See this chart for comparison with other 3D software: Image by Freya Holmér¶\n\nSpace and manipulation gizmos¶ Moving objects in the 3D view is done through the manipulator gizmos. Each axis is represented by a color: Red, Green, Blue represent X, Y, Z respectively. This convention applies to the grid and other gizmos too (and also to the shader language, ordering of components for Vector3, Color, etc.). Some useful keybindings: To snap placement or rotation, press Ctrl while moving, scaling or rotating.\n\nTo center the view on the selected object, press F .\n\nUsing Blender-style transform shortcuts¶ Since Godot 4.2, you can enable Blender-style shortcuts for translating, rotating and scaling nodes. In Blender, these shortcuts are: G for translating\n\nR for rotating\n\nS for scaling After pressing a shortcut key while focusing on the 3D editor viewport, move the mouse or enter a number to move the selected node(s) by the specified amount in 3D units. You can constrain movement to a specific axis by specifying the axis as a letter, then the distance (if entering a value with the keyboard). For instance, to move the selection upwards by 2.5 units, enter the following sequence in order (Y+ is upwards in Godot): G - Y - 2 - . - 5 - Enter To use Blender-style transform shortcuts in Godot, go to the Editor Settings' Shortcuts tab, then in the Spatial Editor section: Bind Begin Translate Transformation to G .\n\nBind Begin Rotate Transformation to R .\n\nBind Begin Scale Transformation to S .\n\nFinally, unbind Scale Mode so that its shortcut won't conflict with Begin Rotate Transformation.\n\nView menu¶ The view options are controlled by the \"View\" menu in the viewport's toolbar. You can hide the gizmos in the 3D view of the editor through this menu: To hide a specific type of gizmos, you can toggle them off in the \"View\" menu.\n\nDefault environment¶ When created from the Project Manager, the 3D environment has a default sky. Given how physically-based rendering works, it is advised to always try to work with a default environment in order to provide indirect and reflected light to your objects.\n\nCameras¶ No matter how many objects are placed in the 3D space, nothing will be displayed unless a Camera3D is also added to the scene. Cameras can work in either orthogonal or perspective projections: Cameras are associated with (and only display to) a parent or grandparent viewport. Since the root of the scene tree is a viewport, cameras will display on it by default, but if sub-viewports (either as render target or picture-in-picture) are desired, they need their own children cameras to display. When dealing with multiple cameras, the following rules are enforced for each viewport: If no cameras are present in the scene tree, the first one that enters it will become the active camera. Further cameras entering the scene will be ignored (unless they are set as current).\n\nIf a camera has the \"current\" property set, it will be used regardless of any other camera in the scene. If the property is set, it will become active, replacing the previous camera.\n\nIf an active camera leaves the scene tree, the first camera in tree-order will take its place."